# OpenRAN Near-RT RIC Dockerfile
# Based on OpenRAN Gym and Colosseum Near-RT RIC implementation

FROM ubuntu:20.04

# Prevent interactive installation prompts
ENV DEBIAN_FRONTEND=noninteractive

# Set environment variables
ENV RIC_HOST=0.0.0.0
ENV RIC_PORT=36421
ENV LOG_LEVEL=INFO

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    curl \
    git \
    pkg-config \
    libsctp-dev \
    libssl-dev \
    libprotobuf-dev \
    protobuf-compiler \
    libzmq3-dev \
    libjsoncpp-dev \
    libcurl4-openssl-dev \
    libboost-all-dev \
    redis-server \
    python3 \
    python3-pip \
    net-tools \
    iputils-ping \
    tcpdump \
    vim \
    && rm -rf /var/lib/apt/lists/*

# Create workspace directory
WORKDIR /workspace

# Clone and build E2 interface components
RUN git clone -b bronze https://github.com/o-ran-sc/ric-plt-e2 e2 && \
    cd e2 && \
    mkdir build && \
    cd build && \
    cmake .. -DDEV_PKG=1 -DLOG_LEVEL=${LOG_LEVEL} && \
    make -j$(nproc) && \
    make install

# Clone and build E2 manager
RUN git clone -b bronze https://github.com/o-ran-sc/ric-plt-e2mgr e2mgr && \
    cd e2mgr && \
    mkdir build && \
    cd build && \
    cmake .. -DDEV_PKG=1 -DLOG_LEVEL=${LOG_LEVEL} && \
    make -j$(nproc) && \
    make install

# Clone and build RIC message router
RUN git clone -b bronze https://github.com/o-ran-sc/ric-plt-lib-rmr rmr && \
    cd rmr && \
    mkdir build && \
    cd build && \
    cmake .. -DDEV_PKG=1 && \
    make -j$(nproc) && \
    make install

# Set up configuration directory
RUN mkdir -p /opt/ric/config

# Create configuration files
RUN cat > /opt/ric/config/ric-plt-e2.conf << 'EOF'
# Near-RT RIC E2 Configuration
ric_host = "0.0.0.0"
ric_port = 36421
log_level = "INFO"
db_host = "redis"
db_port = 6379
EOF

RUN cat > /opt/ric/config/routing-manager.conf << 'EOF'
# Routing Manager Configuration
rmr_port = 4561
log_level = "INFO"
EOF

# Create startup script
RUN cat > /opt/ric/start-ric.sh << 'EOF'
#!/bin/bash

# Start Redis server
redis-server --daemonize yes --bind 0.0.0.0

# Wait for Redis to start
sleep 2

# Start E2 termination
echo "Starting E2 termination..."
/workspace/e2/build/e2term &

# Start E2 manager
echo "Starting E2 manager..."
/workspace/e2mgr/build/e2mgr &

# Wait for services to initialize
sleep 5

# Keep container running
tail -f /dev/null
EOF

RUN chmod +x /opt/ric/start-ric.sh

# Expose ports
EXPOSE 36421 36422 4561 6379

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3800/health || exit 1

# Start the RIC
CMD ["/opt/ric/start-ric.sh"]