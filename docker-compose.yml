services:
  # Redis Database for Near-RT RIC (Official Alpine image)
  redis:
    image: redis:7-alpine
    container_name: openran-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - openran-e2
      - openran-internal
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # E2 Termination (Simple simulation)
  e2term:
    build:
      context: .
      dockerfile: Dockerfile.e2term.simple
    container_name: openran-e2term
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "36421:36421"  # E2 interface
      - "36422:36422"  # E2 interface backup
    environment:
      - RMR_SEED_RT=/opt/e2/init/routes.txt
      - RMR_RTG_SVC=9999
      - DBAAS_SERVICE_HOST=redis
      - DBAAS_SERVICE_PORT=6379
    volumes:
      - e2term-logs:/opt/e2/logs
    networks:
      - openran-e2
      - openran-internal
    restart: unless-stopped

  # E2 Manager (Simple simulation)
  e2mgr:
    build:
      context: .
      dockerfile: Dockerfile.e2mgr.simple
    container_name: openran-e2mgr
    depends_on:
      - redis
      - e2term
    ports:
      - "3800:3800"    # HTTP API
    environment:
      - RMR_SEED_RT=/opt/e2mgr/init/routes.txt
      - RMR_RTG_SVC=9999
      - DBAAS_SERVICE_HOST=redis
      - DBAAS_SERVICE_PORT=6379
    volumes:
      - e2mgr-logs:/opt/e2mgr/logs
    networks:
      - openran-e2
      - openran-internal
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3800/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Routing Manager (Simple simulation)
  rtmgr:
    build:
      context: .
      dockerfile: Dockerfile.rtmgr.simple
    container_name: openran-rtmgr
    depends_on:
      - redis
      - e2term
      - e2mgr
    ports:
      - "4561:4561"    # RMR routing
    environment:
      - RMR_SEED_RT=/opt/rtmgr/init/routes.txt
      - RMR_RTG_SVC=9999
      - DBAAS_SERVICE_HOST=redis
      - DBAAS_SERVICE_PORT=6379
    volumes:
      - rtmgr-logs:/opt/rtmgr/logs
    networks:
      - openran-e2
      - openran-internal
    restart: unless-stopped


  # Sample xApp (Simple Alpine-based)
  sample-xapp:
    build:
      context: .
      dockerfile: Dockerfile.xapp.simple
    container_name: openran-sample-xapp
    depends_on:
      - e2mgr
    ports:
      - "4560:4560"    # xApp communication
      - "8080:8080"    # xApp HTTP API
    environment:
      - RMR_SEED_RT=/opt/xapp/config/routes.txt
      - RMR_RTG_SVC=9999
      - XAPP_NAME=sample-xapp
      - LOG_LEVEL=INFO
    volumes:
      - xapp-logs:/opt/xapp/logs
    networks:
      - openran-e2
      - openran-internal
    healthcheck:
      test: ["CMD", "pgrep", "sample-xapp"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # RAN Simulator (Simple Alpine-based)
  ran-simulator:
    build:
      context: .
      dockerfile: Dockerfile.ran-sim.simple
    container_name: openran-ran-simulator
    depends_on:
      - e2term
      - e2mgr
    environment:
      - RMR_SEED_RT=/opt/ran-sim/config/routes.txt
      - RMR_RTG_SVC=9999
      - GNB_ID=1
      - CELL_ID=1
      - LOG_LEVEL=INFO
    volumes:
      - ran-sim-logs:/opt/ran-sim/logs
    networks:
      - openran-e2
    healthcheck:
      test: ["CMD", "pgrep", "ran-simulator"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: openran-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - openran-internal
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: openran-grafana
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - openran-internal

  # ELK Stack for logging (Elasticsearch)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.14.0
    container_name: openran-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - openran-internal

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:7.14.0
    container_name: openran-kibana
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    networks:
      - openran-internal

networks:
  openran-e2:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  openran-internal:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16

volumes:
  redis-data:
  e2term-logs:
  e2mgr-logs:
  rtmgr-logs:
  xapp-logs:
  ran-sim-logs:
  prometheus-data:
  grafana-data:
  elasticsearch-data: